"""
WebhookÊ©üËÉΩ„ÅÆÁµ±Âêà„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
- „É≠„Éº„Ç´„É´„Åæ„Åü„ÅØRender„Å∏„ÅÆ„ÉÜ„Çπ„ÉàÈÄÅ‰ø°
- Ë§áÊï∞„Éë„Çø„Éº„É≥„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø
- „É¨„Çπ„Éù„É≥„Çπ„ÅÆËá™ÂãïÊ§úË®º
"""
import requests
import json
import sys

# „ÉÜ„Çπ„ÉàÁí∞Â¢É„ÇíÈÅ∏Êäû
TEST_ENVIRONMENTS = {
    'local': 'http://localhost:5000/webhook',
    'render': 'https://tradingview-webhook-s5x1.onrender.com/webhook'
}

# „ÉÜ„Çπ„Éà„Éá„Éº„Çø„Éë„Çø„Éº„É≥
TEST_CASES = {
    'normal': {
        "symbol": "USDJPY",
        "tf": "5",
        "time": 1761015000000,
        "state": {"flag": "", "word": ""},
        "daytrade": {"status": "‰∏äÊòá„ÉÄ„Ç¶", "bos": "", "time": 85},
        "swing": {"status": "‰∏äÊòá„ÉÄ„Ç¶", "bos": "", "time": 70},
        "row_order": ["price", "5m", "15m", "1H", "4H"],
        "cloud_order": ["5m", "15m", "1H", "4H"],
        "clouds": [
            {"label": "5m", "tf": "5m", "gc": True, "fire_count": 0, "thickness": 8.49, "angle": 34.95, "elapsed": 80, "distance_from_price": 10.5, "distance_from_prev": 5.3, "topPrice": 151.50, "bottomPrice": 151.30},
            {"label": "15m", "tf": "15m", "gc": True, "fire_count": 0, "thickness": 8.19, "angle": 34.11, "elapsed": 65, "distance_from_price": 15.2, "distance_from_prev": 8.7, "topPrice": 151.60, "bottomPrice": 151.40},
            {"label": "1H", "tf": "1H", "gc": True, "fire_count": 2, "thickness": 4.87, "angle": 1.55, "elapsed": 95, "distance_from_price": 25.8, "distance_from_prev": 12.4, "topPrice": 151.80, "bottomPrice": 151.20}
        ],
        "price": 151.219
    },
    'fire_max': {
        "symbol": "EURJPY",
        "tf": "15",
        "time": 1761015000000,
        "state": {"flag": "Ë≤∑", "word": "Âº∑Ê∞ó"},
        "daytrade": {"status": "‰∏äÊòá„ÉÄ„Ç¶", "bos": "BOS+1", "time": 120},
        "swing": {"status": "‰∏äÊòá„ÉÄ„Ç¶", "bos": "", "time": 200},
        "row_order": ["price", "5m", "15m", "1H", "4H"],
        "cloud_order": ["5m", "15m", "1H", "4H"],
        "clouds": [
            {"label": "5m", "tf": "5m", "gc": False, "fire_count": 3, "thickness": 5.2, "angle": 25.3, "elapsed": 45},
            {"label": "15m", "tf": "15m", "gc": True, "fire_count": 10, "max_reached": True, "thickness": 12.5, "angle": 45.2, "elapsed": 150},
            {"label": "1H", "tf": "1H", "gc": True, "fire_count": 5, "thickness": 8.3, "angle": 30.1, "elapsed": 200}
        ],
        "price": 163.450
    },
    'multi_symbol': {
        "symbol": "GBPJPY",
        "tf": "5",
        "time": 1761015000000,
        "state": {"flag": "Â£≤", "word": "Âº±Ê∞ó"},
        "daytrade": {"status": "‰∏ãÈôç„ÉÄ„Ç¶", "bos": "BOS-1", "time": 95},
        "swing": {"status": "‰∏ãÈôç„ÉÄ„Ç¶", "bos": "BOS-2", "time": 300},
        "row_order": ["price", "5m", "15m", "1H", "4H"],
        "cloud_order": ["5m", "15m", "1H", "4H"],
        "clouds": [
            {"label": "5m", "tf": "5m", "gc": False, "fire_count": 1, "thickness": 6.8, "angle": 28.5, "elapsed": 60},
            {"label": "15m", "tf": "15m", "gc": False, "fire_count": 2, "thickness": 9.2, "angle": 32.8, "elapsed": 120},
            {"label": "1H", "tf": "1H", "gc": False, "fire_count": 0, "thickness": 3.5, "angle": 15.2, "elapsed": 180}
        ],
        "price": 188.325
    }
}

def run_test(env='local', test_case='normal'):
    """„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"""
    url = TEST_ENVIRONMENTS.get(env)
    data = TEST_CASES.get(test_case)

    if not url or not data:
        print(f"‚ùå Invalid environment or test case")
        return False

    print(f"\n{'='*60}")
    print(f"üß™ „ÉÜ„Çπ„ÉàÂÆüË°å: {test_case} ‚Üí {env}")
    print(f"{'='*60}")
    print(f"üì§ ÈÄÅ‰ø°ÂÖà: {url}")
    print(f"üì¶ „Éá„Éº„Çø: {data['symbol']} - {len(data['clouds'])}Èõ≤")

    try:
        response = requests.post(url, json=data, timeout=10)

        print(f"\nüìä ÁµêÊûú:")
        print(f"   „Çπ„ÉÜ„Éº„Çø„Çπ: {response.status_code}")
        print(f"   „É¨„Çπ„Éù„É≥„Çπ: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")

        # Ê§úË®º
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success':
                print(f"\n‚úÖ „ÉÜ„Çπ„ÉàÊàêÂäüÔºÅ")
                print(f"   ÈÄöÁü•Êï∞: {result.get('notifications', 0)}")
                return True
            else:
                print(f"\n‚ö†Ô∏è „Çµ„Éº„Éê„Éº„Ç®„É©„Éº: {result.get('message')}")
                return False
        else:
            print(f"\n‚ùå HTTP„Ç®„É©„Éº: {response.status_code}")
            return False

    except requests.exceptions.Timeout:
        print(f"\n‚ùå „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºà10ÁßíÔºâ")
        return False
    except Exception as e:
        print(f"\n‚ùå „Ç®„É©„Éº: {e}")
        return False

def run_all_tests(env='local'):
    """ÂÖ®„ÉÜ„Çπ„Éà„ÇíÂÆüË°å"""
    print(f"\nüöÄ ÂÖ®„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÂÆüË°å: {env}")
    results = {}

    for test_case in TEST_CASES.keys():
        results[test_case] = run_test(env, test_case)

    # „Çµ„Éû„É™„Éº
    print(f"\n{'='*60}")
    print(f"üìä „ÉÜ„Çπ„Éà„Çµ„Éû„É™„Éº")
    print(f"{'='*60}")

    passed = sum(1 for r in results.values() if r)
    total = len(results)

    for test_case, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {test_case:20s} : {status}")

    print(f"\n   ÂêàË®à: {passed}/{total} ÊàêÂäü")

    return passed == total

if __name__ == '__main__':
    # ‰Ωø„ÅÑÊñπ
    # python test_webhook.py              ‚Üí „É≠„Éº„Ç´„É´„ÅßÈÄöÂ∏∏„ÉÜ„Çπ„Éà
    # python test_webhook.py local all    ‚Üí „É≠„Éº„Ç´„É´„ÅßÂÖ®„ÉÜ„Çπ„Éà
    # python test_webhook.py render       ‚Üí Render„ÅßÈÄöÂ∏∏„ÉÜ„Çπ„Éà
    # python test_webhook.py render all   ‚Üí Render„ÅßÂÖ®„ÉÜ„Çπ„Éà

    env = sys.argv[1] if len(sys.argv) > 1 else 'local'
    mode = sys.argv[2] if len(sys.argv) > 2 else 'normal'

    if env not in TEST_ENVIRONMENTS:
        print(f"‚ùå Invalid environment: {env}")
        print(f"   Available: {', '.join(TEST_ENVIRONMENTS.keys())}")
        sys.exit(1)

    if mode == 'all':
        success = run_all_tests(env)
        sys.exit(0 if success else 1)
    else:
        success = run_test(env, mode)
        sys.exit(0 if success else 1)